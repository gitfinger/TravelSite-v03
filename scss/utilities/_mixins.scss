// ==========================================================================
// Mixins
// ==========================================================================

// BEM selectors

@mixin e($element) {
  &__#{$element} {
    @content;
  }
}
@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}

// Media queries

@mixin mq($break) {
  @if $break == "small" {
    @media (min-width: $brkpoint--sm) and (max-width: $brkpoint--md) {
      @content;
    }
  }
  @else if $break == "medium" {
    @media (min-width: $brkpoint--md + 1) {
      @content;
    }
  }
  @else if $break == "large" {
    @media (min-width: $brkpoint--lg) {
      @content;
    }
  }
  @else if $break == "exlarge" {
    @media (min-width: $brkpoint--exlg) {
      @content;
    }
  }

  



  @else {
    @error "No value could be retrieved for `#{$break}`. "
  }
}

// Generate modifier color classes

@mixin ui-colors($map, $p-el:null) {
  @each $theme, $color in $map {
    @include m($theme) {
      background-color: $color;

      // If an $p-el value is passed, generate pseudo-element bg colors. Used on progbars.
      @if $p-el {
        &:after {
          background-color: lighten($color, 8%);
        } 
      }
    }
  }
}

// Generating :before or :after pseudo-element shapes

@mixin p-el(
  $el,
  $el-w: null,
  $el-h: null) {
    @if $el == "before" or $el == "after" {
      &:#{$el} {
       @extend %pseudos;
       width: $el-w;
       height: $el-h;
       @content;
     }
   } 
   @else {
     @error "`#{$el}` is not a valid pseudo-element.";
   }
}

// Image replacement

@mixin img-replace($img, $w, $h, $disp: block) {
  background-image: url('#{$path--rel}/#{$img}');
	background-repeat: no-repeat;
	width: $w;
	height: $h;
	display: $disp;
}

@mixin img-replace-logo($img) {
  background-image: url('#{$path--rel}/#{$img}');
}


// Adjacent sibling margins

@mixin doubly($margin: 1em) {
  & + & {
   margin-left: $margin;
   @content;
  }
}




// Background Cover


@mixin bk-splash {
  background-repeat: no-repeat;
  background-position: top;
  background-size: cover;
  -webkit-background-size: cover;
  -o-background-size: cover;
  -moz-background-size: cover;
  } 




// Vertical Margins

@mixin margin-vertical($top, $bottom) {
    margin: {
      top: em($top);
      bottom: em($bottom);
    }
} 



// Vertical Padding Vertical & Horizontal

@mixin padding-v-h($vertical, $horizontal) {
    padding: em($vertical) em($horizontal);
}



// Vertical Font Size & Weight pairs

@mixin font-s-w($size, $weight) {
  font: {
    size: em($size);
    weight: $weight;
  }
}




//Header Colours

@mixin text-colors($text-color: $color-dark) {
  color: $text-color;

}



//Dropshadow Webkit fallbacks

  @mixin shadow($x, $y, $blur, $color) {
         -webkit-box-shadow: $x $y $blur $color;
            -moz-box-shadow: $x $y $blur $color;
                 box-shadow: $x $y $blur $color;
  }



//Opacity fallbacks


@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); /* For IE8 and earlier */
}


//Transisition webkit fallbacks


@mixin transition($property) {
         -webkit-transition: $property $trns-duration ease;
           -moz-transition: $property $trns-duration ease;
             -o-transition: $property $trns-duration ease;
                transition: $property $trns-duration ease;
}




//Colour Palette boxout

@mixin palette-color($bk, $txt) {
  background-color: $bk;
  color: $txt;
}
  


// Width & Height Sizing pair

@mixin w-h-size($w, $h) {
  width: $w;
  height: $h;
}    

